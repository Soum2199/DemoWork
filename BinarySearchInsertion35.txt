//Leetcode Q.35 Search Insertion Position 

/// C++ code
class Solution {
public:
    int searchInsert(vector<int>& arr, int target) {
        int left = 0;  // int right = arr.length;
        int right = arr.size()-1;
        while(left <= right){
        int mid = (left + right)/2;
        // if(arr[mid] == target){ return mid; }
         if(arr[mid] < target){ left = mid+1; }
        else {right = mid-1;}
        }
        if(arr[left] == target) return left;
        return left;
    }
};

//--------------------------------------------------------------------------------
/// Java code
class Solution {
    public int searchInsert(int[] nums, int target) {
        int l=0;
        int r=nums.length-1;
        while(l <= r){
            int mid = (l+r)/2;
            if(nums[mid] == target) return mid;
            else if(nums[mid] > target){
                r = mid-1;
            }
            else{
                l = mid+1;
            }
        }
        return l;
    }
}

// TC = O(log n) , SC = O(1)